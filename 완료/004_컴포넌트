# 컴포넌트 Props 정의

TypeScript 기반 버튼 시스템의 완전한 Props 정의와 사용 가이드입니다.

## Button 컴포넌트 Props

### 기본 인터페이스
```typescript
export interface ButtonProps extends Omit<HTMLMotionProps<'button'>, 'size'> {
  /** 버튼 스타일 변형 */
  variant?: ButtonVariant;
  
  /** 버튼 크기 */
  size?: ButtonSize;
  
  /** 버튼 상태 */
  state?: ButtonState;
  
  /** 로딩 상태 표시 */
  loading?: boolean;
  
  /** 비활성 상태 */
  disabled?: boolean;
  
  /** 아이콘 요소 */
  icon?: React.ReactNode;
  
  /** 아이콘 위치 */
  iconPosition?: 'left' | 'right';
  
  /** 전체 너비 사용 */
  fullWidth?: boolean;
  
  /** 버튼 내용 */
  children?: React.ReactNode;
  
  /** 추가 CSS 클래스 */
  className?: string;
}
```

### 타입 정의
```typescript
export type ButtonVariant = 
  | 'default'     // 기본 회색 버튼
  | 'primary'     // 주요 어두운 버튼
  | 'accent'      // 강조 주황색 버튼
  | 'success'     // 성공 녹색 버튼
  | 'error'       // 에러 빨간색 버튼
  | 'info'        // 정보 파란색 버튼
  | 'outline'     // 테두리만 있는 버튼
  | 'ghost'       // 투명 배경 버튼
  | 'gradient';   // 그라데이션 버튼

export type ButtonSize = 
  | 'sm'          // 32px 높이, 16px 아이콘
  | 'md'          // 40px 높이, 20px 아이콘 (기본값)
  | 'lg';         // 48px 높이, 24px 아이콘

export type ButtonState = 
  | 'default'     // 기본 상태
  | 'hover'       // 마우스 오버 (자동 처리)
  | 'active'      // 클릭 중 (자동 처리)
  | 'disabled'    // 비활성 상태
  | 'loading';    // 로딩 상태
```

### 확장된 Props (고급 기능)
```typescript
export interface ExtendedButtonProps extends ButtonProps {
  /** 버튼 애니메이션 타입 */
  animation?: 'none' | 'scale' | 'slide' | 'fade' | 'rotate';
  
  /** 커스텀 로딩 컴포넌트 */
  loadingComponent?: React.ReactNode;
  
  /** 성공 상태 표시 */
  success?: boolean;
  
  /** 에러 상태 표시 */
  error?: boolean;
  
  /** 툴팁 텍스트 */
  tooltip?: string;
  
  /** 확인 다이얼로그 표시 */
  confirmAction?: boolean;
  
  /** 키보드 단축키 */
  shortcut?: string;
  
  /** 접근성 라벨 */
  ariaLabel?: string;
  
  /** 역할 정의 */
  role?: 'button' | 'submit' | 'reset' | 'menu' | 'tab';
}
```

## LoadingSpinner 컴포넌트 Props

### 기본 인터페이스
```typescript
interface LoadingSpinnerProps {
  /** 스피너 크기 */
  size?: 'sm' | 'md' | 'lg';
  
  /** 진행률 (0-100) */
  progress?: number;
  
  /** 진행률 텍스트 표시 여부 */
  showProgress?: boolean;
  
  /** 회전 속도 */
  speed?: 'slow' | 'normal' | 'fast';
  
  /** 디자인 변형 */
  variant?: 'classic' | 'modern';
  
  /** 색상 테마 */
  color?: 'primary' | 'accent' | 'success' | 'error' | 'custom';
  
  /** 커스텀 색상 */
  customColor?: string;
  
  /** 추가 CSS 클래스 */
  className?: string;
  
  /** 완료 콜백 */
  onComplete?: () => void;
}
```

### 고급 스피너 Props
```typescript
interface AdvancedSpinnerProps extends LoadingSpinnerProps {
  /** 애니메이션 지속시간 (ms) */
  duration?: number;
  
  /** 스피너 두께 */
  thickness?: number;
  
  /** 배경 표시 여부 */
  showBackground?: boolean;
  
  /** 텍스트 라벨 */
  label?: string;
  
  /** 일시정지 기능 */
  paused?: boolean;
  
  /** 역방향 회전 */
  reverse?: boolean;
}
```

## ProgressLoader 컴포넌트 Props

### 기본 인터페이스
```typescript
interface ProgressLoaderProps {
  /** 로딩 상태 */
  isLoading: boolean;
  
  /** 로딩 지속 시간 (밀리초) */
  duration?: number;
  
  /** 완료 콜백 함수 */
  onComplete?: () => void;
  
  /** 진행률 콜백 함수 */
  onProgress?: (progress: number) => void;
  
  /** 퍼센트 표시 여부 */
  showPercentage?: boolean;
  
  /** 스피너 크기 */
  size?: 'sm' | 'md' | 'lg';
  
  /** 회전 속도 */
  speed?: 'slow' | 'normal' | 'fast';
  
  /** 진행률 바 표시 여부 */
  showProgressBar?: boolean;
  
  /** 상태 텍스트 표시 여부 */
  showStatusText?: boolean;
  
  /** 커스텀 로딩 텍스트 */
  loadingText?: string;
  
  /** 커스텀 완료 텍스트 */
  completeText?: string;
  
  /** 추가 CSS 클래스 */
  className?: string;
}
```

### 확장된 ProgressLoader Props
```typescript
interface ExtendedProgressLoaderProps extends ProgressLoaderProps {
  /** 단계별 로딩 */
  steps?: string[];
  
  /** 현재 단계 */
  currentStep?: number;
  
  /** 에러 상태 */
  error?: boolean;
  
  /** 에러 메시지 */
  errorMessage?: string;
  
  /** 취소 기능 */
  cancellable?: boolean;
  
  /** 취소 콜백 */
  onCancel?: () => void;
  
  /** 재시도 기능 */
  retryable?: boolean;
  
  /** 재시도 콜백 */
  onRetry?: () => void;
}
```

## Props 기본값 정의

### Button 기본값
```typescript
const defaultButtonProps: Partial<ButtonProps> = {
  variant: 'default',
  size: 'md',
  state: 'default',
  loading: false,
  disabled: false,
  iconPosition: 'left',
  fullWidth: false,
  className: '',
};
```

### LoadingSpinner 기본값
```typescript
const defaultSpinnerProps: Partial<LoadingSpinnerProps> = {
  size: 'md',
  progress: 0,
  showProgress: false,
  speed: 'normal',
  variant: 'modern',
  color: 'primary',
  className: '',
};
```

### ProgressLoader 기본값
```typescript
const defaultProgressProps: Partial<ProgressLoaderProps> = {
  duration: 3000,
  showPercentage: true,
  size: 'md',
  speed: 'normal',
  showProgressBar: true,
  showStatusText: true,
  loadingText: '로딩 중...',
  completeText: '완료!',
  className: '',
};
```

## Props 검증 (Runtime)

### PropTypes 정의
```typescript
import PropTypes from 'prop-types';

// Button 컴포넌트 PropTypes
Button.propTypes = {
  variant: PropTypes.oneOf([
    'default', 'primary', 'accent', 'success', 
    'error', 'info', 'outline', 'ghost', 'gradient'
  ]),
  size: PropTypes.oneOf(['sm', 'md', 'lg']),
  loading: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: PropTypes.node,
  iconPosition: PropTypes.oneOf(['left', 'right']),
  fullWidth: PropTypes.bool,
  children: PropTypes.node,
  className: PropTypes.string,
  onClick: PropTypes.func,
};
```

### 커스텀 검증 함수
```typescript
const validateButtonProps = (props: ButtonProps): string[] => {
  const errors: string[] = [];
  
  // 아이콘 없이 iconPosition만 설정된 경우
  if (props.iconPosition && !props.icon) {
    errors.push('iconPosition requires icon prop');
  }
  
  // loading과 disabled 동시 설정
  if (props.loading && props.disabled) {
    errors.push('loading and disabled cannot be used together');
  }
  
  // fullWidth와 size가 충돌하는 경우 확인
  if (props.fullWidth && props.size === 'sm') {
    console.warn('fullWidth with small size may cause layout issues');
  }
  
  return errors;
};
```

## 사용 예시

### 기본 사용법
```tsx
// 가장 기본적인 버튼
<Button>클릭하세요</Button>

// 변형과 크기 지정
<Button variant="primary" size="lg">
  큰 주요 버튼
</Button>

// 아이콘과 함께
<Button 
  variant="gradient" 
  icon={<Download />} 
  iconPosition="left"
>
  다운로드
</Button>
```

### 고급 사용법
```tsx
// 로딩 상태와 함께
<Button
  variant="success"
  loading={isSubmitting}
  disabled={!isValid}
  onClick={handleSubmit}
>
  {isSubmitting ? '저장 중...' : '저장하기'}
</Button>

// 풀 너비 버튼
<Button
  variant="accent"
  size="lg"
  fullWidth
  icon={<ShoppingCart />}
>
  장바구니에 추가
</Button>

// 조건부 렌더링
<Button
  variant={hasError ? 'error' : 'success'}
  icon={hasError ? <X /> : <Check />}
  onClick={hasError ? handleRetry : handleContinue}
>
  {hasError ? '다시 시도' : '계속하기'}
</Button>
```

### 이벤트 핸들러
```tsx
const ButtonWithHandlers = () => {
  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    console.log('Button clicked', event);
  };
  
  const handleMouseEnter = () => {
    console.log('Mouse entered');
  };
  
  return (
    <Button
      variant="primary"
      onClick={handleClick}
      onMouseEnter={handleMouseEnter}
      onKeyDown={(e) => e.key === 'Enter' && handleClick(e as any)}
    >
      이벤트 처리 버튼
    </Button>
  );
};
```

## 접근성 Props

### ARIA 속성
```typescript
interface AccessibilityProps {
  /** 접근성 라벨 */
  'aria-label'?: string;
  
  /** 설명 참조 */
  'aria-describedby'?: string;
  
  /** 확장 상태 */
  'aria-expanded'?: boolean;
  
  /** 눌림 상태 */
  'aria-pressed'?: boolean;
  
  /** 팝업 관련 */
  'aria-haspopup'?: boolean | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';
  
  /** 로딩 상태 */
  'aria-busy'?: boolean;
  
  /** 실시간 영역 */
  'aria-live'?: 'off' | 'polite' | 'assertive';
}
```

### 접근성 사용 예시
```tsx
<Button
  variant="primary"
  loading={isLoading}
  aria-label="사용자 정보를 저장합니다"
  aria-describedby="save-help-text"
  aria-busy={isLoading}
>
  저장하기
</Button>

<div id="save-help-text" className="sr-only">
  저장 버튼을 클릭하면 변경사항이 서버에 저장됩니다.
</div>
```

## 성능 최적화 Props

### 메모이제이션 관련
```typescript
// React.memo를 위한 Props 비교 함수
const arePropsEqual = (
  prevProps: ButtonProps, 
  nextProps: ButtonProps
): boolean => {
  return (
    prevProps.variant === nextProps.variant &&
    prevProps.size === nextProps.size &&
    prevProps.loading === nextProps.loading &&
    prevProps.disabled === nextProps.disabled &&
    prevProps.children === nextProps.children
  );
};

export const MemoizedButton = React.memo(Button, arePropsEqual);
```

### 지연 로딩 Props
```typescript
interface LazyButtonProps extends ButtonProps {
  /** 컴포넌트 지연 로딩 */
  lazy?: boolean;
  
  /** 로딩 플레이스홀더 */
  placeholder?: React.ReactNode;
  
  /** 프리로드 조건 */
  preload?: boolean;
}
```

## Props 문서화

### JSDoc 주석
```typescript
/**
 * 상용급 버튼 컴포넌트
 * 
 * @example
 * ```tsx
 * <Button variant="primary" size="lg" icon={<Download />}>
 *   다운로드
 * </Button>
 * ```
 */
export interface ButtonProps {
  /**
   * 버튼의 시각적 스타일을 결정합니다.
   * 
   * @default 'default'
   * @example
   * ```tsx
   * <Button variant="gradient">그라데이션 버튼</Button>
   * ```
   */
  variant?: ButtonVariant;
  
  /**
   * 버튼의 크기를 설정합니다. 8px 그리드 시스템을 따릅니다.
   * 
   * @default 'md'
   * @example
   * ```tsx
   * <Button size="lg">큰 버튼</Button>
   * ```
   */
  size?: ButtonSize;
}
```

## 테스트를 위한 Props

### 테스트 전용 Props
```typescript
interface TestProps {
  /** 테스트 ID */
  'data-testid'?: string;
  
  /** 테스트 클래스 */
  'data-test-class'?: string;
  
  /** 테스트 상태 */
  'data-test-state'?: string;
}

// 사용 예시
<Button
  variant="primary"
  data-testid="submit-button"
  data-test-state="enabled"
>
  제출하기
</Button>
```

### 스토리북을 위한 Props
```typescript
// Storybook Controls
export const buttonArgTypes = {
  variant: {
    control: 'select',
    options: ['default', 'primary', 'accent', 'gradient'],
    description: '버튼 스타일 변형',
  },
  size: {
    control: 'radio',
    options: ['sm', 'md', 'lg'],
    description: '버튼 크기',
  },
  loading: {
    control: 'boolean',
    description: '로딩 상태 표시',
  },
  disabled: {
    control: 'boolean',
    description: '비활성 상태',
  },
};
```

## 마이그레이션 가이드

### v1 → v2 Props 변경사항
```typescript
// v1 (기존)
interface ButtonPropsV1 {
  type?: 'button' | 'submit' | 'reset';  // ❌ 제거됨
  kind?: 'primary' | 'secondary';        // ❌ variant로 변경
  isLoading?: boolean;                    // ❌ loading으로 변경
  isDisabled?: boolean;                   // ❌ disabled로 변경
}

// v2 (현재)
interface ButtonPropsV2 {
  variant?: ButtonVariant;                // ✅ 새로 추가
  loading?: boolean;                      // ✅ 이름 변경
  disabled?: boolean;                     // ✅ 이름 변경
  state?: ButtonState;                    // ✅ 새로 추가
}

// 마이그레이션 헬퍼
const migrateProps = (oldProps: ButtonPropsV1): ButtonPropsV2 => ({
  variant: oldProps.kind === 'primary' ? 'primary' : 'default',
  loading: oldProps.isLoading,
  disabled: oldProps.isDisabled,
});
```